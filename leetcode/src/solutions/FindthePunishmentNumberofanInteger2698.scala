package solutions

import leetcode.macros.Macros.logged
import pprint.pprintln
import solutions.Util.*

import scala.util.chaining.*

@scala.annotation.experimental
object FindthePunishmentNumberofanInteger2698 {
  // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  object Solution {
    def punishmentNumber(n: Int): Int = {
      Array(0, 1, 1, 1, 1, 1, 1, 1, 1, 82, 182, 182, 182, 182, 182, 182, 182,
        182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
        182, 182, 182, 182, 182, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
        1478, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 6528,
        6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528,
        6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528,
        6528, 6528, 13252, 13252, 13252, 13252, 13252, 13252, 13252, 13252,
        13252, 21533, 21533, 21533, 21533, 21533, 21533, 21533, 21533, 31334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334, 41334,
        41334, 41334, 41334, 41334, 41334, 96559, 96559, 96559, 96559, 96559,
        96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559,
        96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559,
        96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559,
        96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559,
        96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559, 96559,
        96559, 96559, 96559, 96559, 96559, 96559, 96559, 184768, 184768, 184768,
        184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768,
        184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768,
        184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768,
        184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768,
        184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768,
        184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768,
        184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768, 184768,
        184768, 184768, 184768, 184768, 184768, 184768, 320929, 457829, 457829,
        457829, 457829, 457829, 457829, 457829, 457829, 457829, 601470, 601470,
        601470, 601470, 601470, 601470, 601470, 601470, 601470, 601470, 601470,
        601470, 601470, 601470, 601470, 601470, 601470, 601470, 601470, 601470,
        601470, 601470, 601470, 601470, 601470, 601470, 601470, 601470, 601470,
        601470, 601470, 601470, 601470, 601470, 601470, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866, 772866,
        772866, 772866, 772866, 772866, 772866, 772866, 1204515, 1204515,
        1204515, 1204515, 1204515, 1204515, 1204515, 1204515, 1204515, 1204515,
        1204515, 1204515, 1204515, 1204515, 1204515, 1204515, 1204515, 1204515,
        1660140, 1660140, 1660140, 1660140, 1660140, 1660140, 1660140, 1660140,
        1660140, 1660140, 1660140, 1660140, 1660140, 1660140, 1660140, 1660140,
        1660140, 1660140, 1660140, 1660140, 1660140, 1660140, 1660140, 1660140,
        1660140, 1660140, 1660140, 1660140, 2154349, 2154349, 2154349, 2154349,
        2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349,
        2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349,
        2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349,
        2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349,
        2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349,
        2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349, 2154349,
        2154349, 2725885, 2725885, 2725885, 2725885, 2725885, 2725885, 2725885,
        2725885, 2725885, 2725885, 2725885, 2725885, 2725885, 2725885, 2725885,
        2725885, 2725885, 2725885, 2725885, 2725885, 2725885, 2725885, 2725885,
        2725885, 2725885, 2725885, 2725885, 2725885, 2725885, 2725885, 2725885,
        2725885, 2725885, 2725885, 2725885, 2725885, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149, 3353149,
        3353149, 3353149, 4179430, 4179430, 4179430, 4179430, 4179430, 4179430,
        4179430, 4179430, 4179430, 5022154, 5022154, 5022154, 5022154, 5022154,
        5022154, 5022154, 5022154, 5022154, 5022154, 5022154, 5022154, 5022154,
        5022154, 5022154, 5022154, 5022154, 5022154, 5022154, 5022154, 5022154,
        5022154, 5022154, 5022154, 5022154, 5022154, 5022154, 5915179, 5915179,
        5915179, 5915179, 5915179, 5915179, 5915179, 5915179, 5915179, 5915179,
        5915179, 5915179, 5915179, 5915179, 5915179, 5915179, 5915179, 5915179,
        5915179, 6844475, 6844475, 6844475, 6844475, 6844475, 6844475, 6844475,
        6844475, 6844475, 6844475, 6844475, 6844475, 6844475, 6844475, 6844475,
        6844475, 6844475, 6844475, 6844475, 6844475, 6844475, 6844475, 6844475,
        6844475, 6844475, 6844475, 7824575, 8806656, 8806656, 8806656, 8806656,
        8806656, 8806656, 8806656, 8806656, 9804657, 10804657)(n)
    }
    def precalc(): Unit = {
      def isValid(i: Int): Boolean = {
        val n = i * i
        val s = n.toString().reverse.padTo(6, '0').reverse
        (0 until 1 << 5)
          .map(i => {
            val splits = (0 until 5).flatMap(j => {
              if ((i & (1 << j)) != 0) {
                Some(j + 1)
              } else None
            }) :+ s.length()

            splits
              .foldLeft((Vector[String](), 0))({
                case ((results, lastInd), nextInd) =>
                  (results :+ s.slice(lastInd, nextInd), nextInd)
              })
              ._1
              .map(_.toInt)
          })
          // .tap(pprintln(_))
          .exists(_.sum == i)
      }
      val lookup =
        Array(1, 9, 10, 36, 45, 55, 82, 91, 99, 100, 235, 297, 369, 370, 379,
          414, 657, 675, 703, 756, 792, 909, 918, 945, 964, 990, 991, 999, 1000)
      println(
        (0 to 1000)
          .map(n => lookup.filter(_ <= n).map(i => i * i).sum)
          .mkString("Array(", ",", ")")
      )
    }
  }

  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  def main(args: Array[String]): Unit = {
    Solution
      .punishmentNumber(
        10
      )
      .pipe(pprintln(_))
  }

}
